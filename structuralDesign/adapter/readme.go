package adapter

/*
适配器

定义：
	将不兼容接口转为可兼容接口，让原本由于接口不兼容不能一起工作的类可以一起工作。
作用：
	用来做适配

应用场景：
	1.封装有缺陷的接口设计
	2.统一多个类的接口设计
	3.替换依赖的外部系统
	4.兼容老版本的接口
	5.适配不同格式的数据

实现方式：
	分类：
		1.类适配器 （继承实现）
		2.对象适配器 （组合实现）
	选择依据： 需要适配的接口多不多。
		1. 不多 。两种都可
		2. 多。 是否需要大量修改
			1）需要  对象适配器
			2）不需要  类适配器


和前面几种结构性设计模式的区别：
	1. 代理模式：
		目的是控制访问，而非加强功能
	2. 桥接模式
		目的是 将接口部分和实现部分 分离，从类让他们较为容易、也相对独立
	3.装饰器模式
		目的是增强原始功能，支持多个装饰器嵌套使用
	4.适配器模式
		是一种事后补救策略。目的是兼容
*/
